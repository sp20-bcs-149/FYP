"use strict";
exports.__esModule = true;
exports.useOAuth = void 0;
var tslib_1 = require("tslib");
var clerk_react_1 = require("@clerk/clerk-react");
var AuthSession = tslib_1.__importStar(require("expo-auth-session"));
var WebBrowser = tslib_1.__importStar(require("expo-web-browser"));
function useOAuth(useOAuthParams) {
    var strategy = (useOAuthParams || {}).strategy;
    if (!strategy) {
        throw new Error('Missing oauth strategy');
    }
    var _a = (0, clerk_react_1.useSignIn)(), signIn = _a.signIn, setActive = _a.setActive, isSignInLoaded = _a.isLoaded;
    var _b = (0, clerk_react_1.useSignUp)(), signUp = _b.signUp, isSignUpLoaded = _b.isLoaded;
    function startOAuthFlow(startOAuthFlowParams) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var oauthRedirectUrl, externalVerificationRedirectURL, authSessionResult, _a, type, url, params, rotatingTokenNonce, status, firstFactorVerification, createdSessionId;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!isSignInLoaded || !isSignUpLoaded) {
                            return [2 /*return*/, {
                                    createdSessionId: '',
                                    signIn: signIn,
                                    signUp: signUp,
                                    setActive: setActive
                                }];
                        }
                        oauthRedirectUrl = (startOAuthFlowParams === null || startOAuthFlowParams === void 0 ? void 0 : startOAuthFlowParams.redirectUrl) ||
                            useOAuthParams.redirectUrl ||
                            AuthSession.makeRedirectUri({
                                path: 'oauth-native-callback'
                            });
                        return [4 /*yield*/, signIn.create({ strategy: strategy, redirectUrl: oauthRedirectUrl })];
                    case 1:
                        _b.sent();
                        externalVerificationRedirectURL = signIn.firstFactorVerification.externalVerificationRedirectURL;
                        return [4 /*yield*/, WebBrowser.openAuthSessionAsync(externalVerificationRedirectURL.toString(), oauthRedirectUrl)];
                    case 2:
                        authSessionResult = _b.sent();
                        _a = authSessionResult || {}, type = _a.type, url = _a.url;
                        // TODO: Check all the possible AuthSession results
                        // https://docs.expo.dev/versions/latest/sdk/auth-session/#returns-7
                        if (type !== 'success') {
                            return [2 /*return*/, {
                                    authSessionResult: authSessionResult,
                                    createdSessionId: '',
                                    setActive: setActive,
                                    signIn: signIn,
                                    signUp: signUp
                                }];
                        }
                        params = new URL(url).searchParams;
                        rotatingTokenNonce = params.get('rotating_token_nonce') || '';
                        return [4 /*yield*/, signIn.reload({ rotatingTokenNonce: rotatingTokenNonce })];
                    case 3:
                        _b.sent();
                        status = signIn.status, firstFactorVerification = signIn.firstFactorVerification;
                        createdSessionId = '';
                        if (!(status === 'complete')) return [3 /*break*/, 4];
                        createdSessionId = signIn.createdSessionId;
                        return [3 /*break*/, 6];
                    case 4:
                        if (!(firstFactorVerification.status === 'transferable')) return [3 /*break*/, 6];
                        return [4 /*yield*/, signUp.create({
                                transfer: true,
                                unsafeMetadata: (startOAuthFlowParams === null || startOAuthFlowParams === void 0 ? void 0 : startOAuthFlowParams.unsafeMetadata) || useOAuthParams.unsafeMetadata
                            })];
                    case 5:
                        _b.sent();
                        createdSessionId = signUp.createdSessionId || '';
                        _b.label = 6;
                    case 6: return [2 /*return*/, {
                            authSessionResult: authSessionResult,
                            createdSessionId: createdSessionId,
                            setActive: setActive,
                            signIn: signIn,
                            signUp: signUp
                        }];
                }
            });
        });
    }
    return {
        startOAuthFlow: startOAuthFlow
    };
}
exports.useOAuth = useOAuth;
