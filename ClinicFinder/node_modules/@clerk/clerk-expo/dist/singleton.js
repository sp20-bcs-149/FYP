"use strict";
exports.__esModule = true;
exports.buildClerk = exports.clerk = void 0;
var tslib_1 = require("tslib");
var headless_1 = tslib_1.__importDefault(require("@clerk/clerk-js/headless"));
var KEY = '__clerk_client_jwt';
function buildClerk(_a) {
    var _this = this;
    var key = _a.key, tokenCache = _a.tokenCache;
    if (!exports.clerk) {
        var getToken_1 = tokenCache.getToken;
        var saveToken_1 = tokenCache.saveToken;
        // TODO: DO NOT ACCEPT THIS
        exports.clerk = new headless_1["default"](key);
        // @ts-expect-error
        exports.clerk.__unstable__onBeforeRequest(function (requestInit) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var jwt;
            var _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // https://reactnative.dev/docs/0.61/network#known-issues-with-fetch-and-cookie-based-authentication
                        requestInit.credentials = 'omit';
                        (_a = requestInit.url) === null || _a === void 0 ? void 0 : _a.searchParams.append('_is_native', '1');
                        return [4 /*yield*/, getToken_1(KEY)];
                    case 1:
                        jwt = _b.sent();
                        requestInit.headers.set('authorization', jwt || '');
                        return [2 /*return*/];
                }
            });
        }); });
        // @ts-expect-error
        exports.clerk.__unstable__onAfterResponse(function (_, response) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var authHeader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        authHeader = response.headers.get('authorization');
                        if (!authHeader) return [3 /*break*/, 2];
                        return [4 /*yield*/, saveToken_1(KEY, authHeader)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
    }
    return exports.clerk;
}
exports.buildClerk = buildClerk;
