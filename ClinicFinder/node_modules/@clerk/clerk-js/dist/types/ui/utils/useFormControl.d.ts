import type { ClerkAPIError } from '@clerk/types';
import type { HTMLInputTypeAttribute } from 'react';
import React from 'react';
import type { LocalizationKey } from '../localization';
type SelectOption = {
    value: string;
    label?: string;
};
type Options = {
    isRequired?: boolean;
    label: string | LocalizationKey;
    placeholder?: string | LocalizationKey;
    options?: SelectOption[];
    defaultChecked?: boolean;
    enableErrorAfterBlur?: boolean;
    informationText?: string;
} & ({
    validatePassword?: never;
    type?: Exclude<HTMLInputTypeAttribute, 'password'>;
} | {
    type: Extract<HTMLInputTypeAttribute, 'password'>;
    validatePassword: boolean;
});
type FieldStateProps<Id> = {
    id: Id;
    name: Id;
    value: string;
    checked?: boolean;
    onChange: React.ChangeEventHandler<HTMLInputElement>;
    onBlur: React.FocusEventHandler<HTMLInputElement>;
    onFocus: React.FocusEventHandler<HTMLInputElement>;
    hasLostFocus: boolean;
    errorText: string | undefined;
    warningText: string;
    setError: (error: string | ClerkAPIError | undefined) => void;
    setWarning: (message: string) => void;
    setSuccessful: (message: string) => void;
    setHasPassedComplexity: (b: boolean) => void;
    hasPassedComplexity: boolean;
    successfulText: string;
    isFocused: boolean;
} & Omit<Options, 'defaultChecked'>;
export type FormControlState<Id = string> = FieldStateProps<Id> & {
    setError: (error: string | ClerkAPIError | undefined) => void;
    setSuccessful: (message: string) => void;
    setValue: (val: string | undefined) => void;
    setChecked: (isChecked: boolean) => void;
    props: FieldStateProps<Id>;
};
export declare const useFormControl: <Id extends string>(id: Id, initialState: string, opts?: Options) => FormControlState<Id>;
type FormControlStateLike = Pick<FormControlState, 'id' | 'value'>;
export declare const buildRequest: (fieldStates: Array<FormControlStateLike>) => Record<string, any>;
type DebouncedFeedback = {
    debounced: {
        errorText: string;
        warningText: string;
        successfulText: string;
        isFocused: boolean;
        informationText: string;
    };
};
type DebouncingOption = {
    hasLostFocus: boolean;
    warningText: string | undefined;
    errorText: string | undefined;
    enableErrorAfterBlur: boolean | undefined;
    successfulText: string | undefined;
    isFocused: boolean;
    informationText: string | undefined;
    hasPassedComplexity: boolean;
    skipBlur?: boolean;
    delayInMs?: number;
};
export declare const useFormControlFeedback: (opts: DebouncingOption) => DebouncedFeedback;
export {};
