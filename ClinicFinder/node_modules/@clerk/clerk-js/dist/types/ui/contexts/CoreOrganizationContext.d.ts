/// <reference types="react" />
export declare const CoreOrganizationContext: import("react").Context<{
    value: {
        organization: import("@clerk/types").OrganizationResource | null | undefined;
        lastOrganizationInvitation: import("@clerk/types").OrganizationInvitationResource | null | undefined;
        lastOrganizationMember: import("@clerk/types").OrganizationMembershipResource | null | undefined;
    };
} | undefined>;
export declare const useCoreOrganization: (params?: {
    invitationList?: import("@clerk/types").ClerkPaginationParams | undefined;
    membershipList?: import("@clerk/types").GetMembershipsParams | undefined;
} | undefined) => {
    isLoaded: false;
    organization: undefined;
    invitationList: undefined;
    membershipList: undefined;
    membership: undefined;
} | {
    isLoaded: true;
    organization: import("@clerk/types").OrganizationResource;
    invitationList: undefined;
    membershipList: undefined;
    membership: undefined;
} | {
    isLoaded: boolean;
    organization: import("@clerk/types").OrganizationResource | null;
    invitationList: import("@clerk/types").OrganizationInvitationResource[] | null | undefined;
    membershipList: import("@clerk/types").OrganizationMembershipResource[] | null | undefined;
    membership: import("@clerk/types").OrganizationMembershipResource | null | undefined;
};
export declare const useCoreOrganizationList: () => {
    isLoaded: false;
    organizationList: undefined;
    createOrganization: undefined;
    setActive: undefined;
} | {
    isLoaded: true;
    organizationList: {
        membership: import("@clerk/types").OrganizationMembershipResource;
        organization: import("@clerk/types").OrganizationResource;
    }[];
    createOrganization: (params: import("@clerk/types").CreateOrganizationParams) => Promise<import("@clerk/types").OrganizationResource>;
    setActive: import("@clerk/types").SetActive;
};
export declare const useCoreOrganizations: () => {
    isLoaded: false;
    createOrganization: undefined;
    getOrganizationMemberships: undefined;
    getOrganization: undefined;
} | {
    isLoaded: true;
    createOrganization: (params: import("@clerk/types").CreateOrganizationParams) => Promise<import("@clerk/types").OrganizationResource>;
    getOrganizationMemberships: () => Promise<import("@clerk/types").OrganizationMembershipResource[]>;
    getOrganization: (organizationId: string) => Promise<import("@clerk/types").OrganizationResource | undefined>;
};
