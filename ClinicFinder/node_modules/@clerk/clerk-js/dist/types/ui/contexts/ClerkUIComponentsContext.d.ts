/// <reference types="qs" />
import React from 'react';
import type { ParsedQs } from '../router';
import type { AvailableComponentCtx, SignInCtx, SignUpCtx, UserProfileCtx } from '../types';
export declare const ComponentContext: React.Context<AvailableComponentCtx | null>;
export type SignUpContextType = SignUpCtx & {
    navigateAfterSignUp: () => any;
    queryParams: ParsedQs;
    signInUrl: string;
    secondFactorUrl: string;
    authQueryString: string | null;
};
export declare const useSignUpContext: () => SignUpContextType;
export type SignInContextType = SignInCtx & {
    navigateAfterSignIn: () => any;
    queryParams: ParsedQs;
    signUpUrl: string;
    signUpContinueUrl: string;
    authQueryString: string | null;
};
export declare const useSignInContext: () => SignInContextType;
export type UserProfileContextType = UserProfileCtx & {
    queryParams: ParsedQs;
    authQueryString: string | null;
};
export declare const useUserProfileContext: () => UserProfileContextType;
export declare const useUserButtonContext: () => {
    componentName: "UserButton";
    navigateAfterMultiSessionSingleSignOut: () => Promise<unknown>;
    navigateAfterSignOut: () => Promise<unknown>;
    navigateAfterSwitchSession: () => Promise<unknown>;
    signInUrl: string;
    userProfileUrl: string;
    afterMultiSessionSingleSignOutUrl: string;
    afterSignOutUrl: string;
    afterSwitchSessionUrl: string;
    showName?: boolean | undefined;
    defaultOpen?: boolean | undefined;
    userProfileMode?: "modal" | "navigation" | undefined;
    appearance?: (import("@clerk/types").Theme & {
        userProfile?: import("@clerk/types").Theme | undefined;
    }) | undefined;
    userProfileProps?: Pick<import("@clerk/types/dist/clerk").UserProfileProps, "additionalOAuthScopes"> | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useOrganizationSwitcherContext: () => {
    hidePersonal: boolean;
    organizationProfileMode: "modal" | "navigation";
    createOrganizationMode: "modal" | "navigation";
    afterCreateOrganizationUrl: string;
    afterLeaveOrganizationUrl: string;
    navigateOrganizationProfile: () => Promise<unknown>;
    navigateCreateOrganization: () => Promise<unknown>;
    navigateAfterSwitchOrganization: () => Promise<unknown>;
    componentName: "OrganizationSwitcher";
    defaultOpen?: boolean | undefined;
    afterSwitchOrganizationUrl?: string | undefined;
    organizationProfileUrl?: string | undefined;
    createOrganizationUrl?: string | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useOrganizationProfileContext: () => {
    navigateAfterLeaveOrganization: () => Promise<unknown>;
    componentName: "OrganizationProfile";
    routing?: import("@clerk/types").RoutingStrategy | undefined;
    path?: string | undefined;
    afterLeaveOrganizationUrl?: string | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
export declare const useCreateOrganizationContext: () => {
    navigateAfterCreateOrganization: () => Promise<unknown>;
    componentName: "CreateOrganization";
    routing?: import("@clerk/types").RoutingStrategy | undefined;
    path?: string | undefined;
    afterCreateOrganizationUrl?: string | undefined;
    skipInvitationScreen?: boolean | undefined;
    appearance?: import("@clerk/types").Theme | undefined;
    mode?: ("modal" | "mounted") | undefined;
};
