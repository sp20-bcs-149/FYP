import type { AttemptFirstFactorParams, AttemptSecondFactorParams, AuthenticateWithRedirectParams, AuthenticateWithWeb3Params, CreateMagicLinkFlowReturn, PrepareFirstFactorParams, PrepareSecondFactorParams, ResetPasswordParams, SignInCreateParams, SignInFirstFactor, SignInIdentifier, SignInJSON, SignInResource, SignInSecondFactor, SignInStartMagicLinkFlowParams, SignInStatus, UserData, VerificationResource } from '@clerk/types';
import { BaseResource } from './internal';
export declare class SignIn extends BaseResource implements SignInResource {
    pathRoot: string;
    id?: string;
    status: SignInStatus | null;
    supportedIdentifiers: SignInIdentifier[];
    supportedFirstFactors: SignInFirstFactor[];
    supportedSecondFactors: SignInSecondFactor[];
    firstFactorVerification: VerificationResource;
    secondFactorVerification: VerificationResource;
    identifier: string | null;
    createdSessionId: string | null;
    userData: UserData;
    constructor(data?: SignInJSON | null);
    create: (params: SignInCreateParams) => Promise<this>;
    resetPassword: (params: ResetPasswordParams) => Promise<SignInResource>;
    prepareFirstFactor: (factor: PrepareFirstFactorParams) => Promise<SignInResource>;
    attemptFirstFactor: (params: AttemptFirstFactorParams) => Promise<SignInResource>;
    createMagicLinkFlow: () => CreateMagicLinkFlowReturn<SignInStartMagicLinkFlowParams, SignInResource>;
    prepareSecondFactor: (params: PrepareSecondFactorParams) => Promise<SignInResource>;
    attemptSecondFactor: (params: AttemptSecondFactorParams) => Promise<SignInResource>;
    authenticateWithRedirect: (params: AuthenticateWithRedirectParams) => Promise<void>;
    authenticateWithWeb3: (params: AuthenticateWithWeb3Params) => Promise<SignInResource>;
    authenticateWithMetamask: () => Promise<SignInResource>;
    protected fromJSON(data: SignInJSON | null): this;
}
