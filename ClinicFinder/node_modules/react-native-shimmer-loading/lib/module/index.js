function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useEffect } from "react";
import { StyleSheet, View } from "react-native";
import Animated, { Easing, interpolate, useAnimatedStyle, useSharedValue, withRepeat, withTiming } from "react-native-reanimated";
import { withPause } from "react-native-redash";

const getOutputRange = (width, isReversed) => {
  'worklet';

  return isReversed ? [width, -width] : [-width, width];
};

const ShimmerPlaceholder = /*#__PURE__*/React.memo(props => {
  const {
    reverseLoop = true
  } = props;
  const animatedValue = useSharedValue(-1);
  const paused = useSharedValue(props.visible);
  useEffect(() => {
    paused.value = props.visible;
  }, [props.visible, paused]);
  useEffect(() => {
    animatedValue.value = -1;
    animatedValue.value = withPause(withRepeat(withTiming(1, {
      duration: 1000,
      easing: Easing.ease
    }), -1, reverseLoop), paused);
  }, [animatedValue, paused, reverseLoop]);
  return /*#__PURE__*/React.createElement(BasedShimmerPlaceholder, _extends({}, props, {
    animatedValue: animatedValue
  }));
});

const BasedShimmerPlaceholder = props => {
  var _shimmerStyle$width;

  const {
    shimmerColors = ["#ebebeb", "#c5c5c5", "#ebebeb"],
    isReversed = false,
    visible,
    location = [0.3, 0.5, 0.7],
    style,
    contentStyle,
    shimmerStyle,
    LinearGradient = View,
    children,
    animatedValue,
    shimmerWidthPercent = 1,
    containerProps,
    shimmerContainerProps,
    childrenContainerProps
  } = props;
  const width = parseFloat(`${(_shimmerStyle$width = shimmerStyle === null || shimmerStyle === void 0 ? void 0 : shimmerStyle.width) !== null && _shimmerStyle$width !== void 0 ? _shimmerStyle$width : 0}`);
  const animatedStyle = useAnimatedStyle(() => {
    var _animatedValue$value;

    const linearTranslate = interpolate((_animatedValue$value = animatedValue.value) !== null && _animatedValue$value !== void 0 ? _animatedValue$value : -1, [-1, 1], getOutputRange(width, isReversed));
    return {
      transform: [{
        translateX: linearTranslate
      }]
    };
  });
  return /*#__PURE__*/React.createElement(View, _extends({
    style: [styles.container, !visible && shimmerStyle, style]
  }, containerProps), /*#__PURE__*/React.createElement(View, _extends({
    style: [!visible && {
      width: 0,
      height: 0,
      opacity: 0
    }, visible && contentStyle]
  }, childrenContainerProps), children), !visible && /*#__PURE__*/React.createElement(View, _extends({
    style: [styles.shimmer, {
      backgroundColor: shimmerColors[0]
    }]
  }, shimmerContainerProps), /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.shimmer, animatedStyle]
  }, /*#__PURE__*/React.createElement(LinearGradient, {
    colors: shimmerColors,
    style: {
      flex: 1,
      width: width * shimmerWidthPercent
    },
    start: {
      x: -1,
      y: 0.5
    },
    end: {
      x: 2,
      y: 0.5
    },
    locations: location
  }))));
};

const styles = StyleSheet.create({
  container: {
    overflow: "hidden"
  },
  shimmer: {
    flex: 1
  }
});
export default ShimmerPlaceholder;
//# sourceMappingURL=index.js.map