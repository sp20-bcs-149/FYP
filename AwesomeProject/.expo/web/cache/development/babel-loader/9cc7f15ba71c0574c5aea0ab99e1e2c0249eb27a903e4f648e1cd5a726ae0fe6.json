{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AnimatedText from \"../../Typography/AnimatedText\";\nvar LabelBackground = function LabelBackground(_ref) {\n  var labeled = _ref.labeled,\n    labelLayoutWidth = _ref.labelLayoutWidth,\n    placeholderStyle = _ref.placeholderStyle,\n    baseLabelTranslateX = _ref.baseLabelTranslateX,\n    topPosition = _ref.topPosition,\n    label = _ref.label,\n    backgroundColor = _ref.backgroundColor,\n    roundness = _ref.roundness,\n    labelStyle = _ref.labelStyle,\n    maxFontSizeMultiplier = _ref.maxFontSizeMultiplier;\n  var opacity = labeled.interpolate({\n    inputRange: [0, 0.6],\n    outputRange: [1, 0]\n  });\n  var labelTranslationX = {\n    translateX: labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [-baseLabelTranslateX, 0]\n    })\n  };\n  var labelTextScaleY = {\n    scaleY: labeled.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.2, 1]\n    })\n  };\n  var labelTextTransform = [].concat(_toConsumableArray(labelStyle.transform), [labelTextScaleY]);\n  var isRounded = roundness > 6;\n  var roundedEdgeCover = isRounded ? React.createElement(Animated.View, {\n    key: \"labelBackground-view\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.view, {\n      backgroundColor: backgroundColor,\n      maxHeight: Math.max(roundness / 3, 2),\n      bottom: Math.max(roundness, 2),\n      transform: [labelTranslationX],\n      opacity: opacity\n    }]\n  }) : null;\n  return [roundedEdgeCover, React.createElement(AnimatedText, {\n    key: \"labelBackground-text\",\n    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {\n      top: topPosition + 1,\n      width: labelLayoutWidth - placeholderStyle.paddingHorizontal,\n      backgroundColor: backgroundColor,\n      opacity: opacity,\n      transform: labelTextTransform\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)];\n};\nexport default LabelBackground;\nvar styles = StyleSheet.create({\n  view: {\n    position: 'absolute',\n    top: 6,\n    left: 10,\n    width: 12\n  },\n  outlinedLabel: {\n    position: 'absolute',\n    left: 8,\n    paddingHorizontal: 0,\n    color: 'transparent'\n  }\n});","map":{"version":3,"names":["React","Animated","StyleSheet","AnimatedText","LabelBackground","_ref","labeled","labelLayoutWidth","placeholderStyle","baseLabelTranslateX","topPosition","label","backgroundColor","roundness","labelStyle","maxFontSizeMultiplier","opacity","interpolate","inputRange","outputRange","labelTranslationX","translateX","labelTextScaleY","scaleY","labelTextTransform","concat","_toConsumableArray","transform","isRounded","roundedEdgeCover","createElement","View","key","pointerEvents","style","absoluteFill","styles","view","maxHeight","Math","max","bottom","outlinedLabel","top","width","paddingHorizontal","numberOfLines","create","position","left","color"],"sources":["E:\\4 -ReactNative\\Final-Year-Project\\FYP3\\AwesomeProject\\node_modules\\react-native-paper\\src\\components\\TextInput\\Label\\LabelBackground.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Animated, StyleSheet } from 'react-native';\r\n\r\nimport AnimatedText from '../../Typography/AnimatedText';\r\nimport type { LabelBackgroundProps } from '../types';\r\n\r\nconst LabelBackground = ({\r\n  labeled,\r\n  labelLayoutWidth,\r\n  placeholderStyle,\r\n  baseLabelTranslateX,\r\n  topPosition,\r\n  label,\r\n  backgroundColor,\r\n  roundness,\r\n  labelStyle,\r\n  maxFontSizeMultiplier,\r\n}: LabelBackgroundProps) => {\r\n  const opacity = labeled.interpolate({\r\n    inputRange: [0, 0.6],\r\n    outputRange: [1, 0],\r\n  });\r\n\r\n  const labelTranslationX = {\r\n    translateX: labeled.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [-baseLabelTranslateX, 0],\r\n    }),\r\n  };\r\n\r\n  const labelTextScaleY = {\r\n    scaleY: labeled.interpolate({\r\n      inputRange: [0, 1],\r\n      outputRange: [0.2, 1],\r\n    }),\r\n  };\r\n\r\n  const labelTextTransform = [...labelStyle.transform, labelTextScaleY];\r\n\r\n  const isRounded = roundness > 6;\r\n  const roundedEdgeCover = isRounded ? (\r\n    <Animated.View\r\n      key=\"labelBackground-view\"\r\n      pointerEvents=\"none\"\r\n      style={[\r\n        StyleSheet.absoluteFill,\r\n        styles.view,\r\n        {\r\n          backgroundColor,\r\n          maxHeight: Math.max(roundness / 3, 2),\r\n          bottom: Math.max(roundness, 2),\r\n          transform: [labelTranslationX],\r\n          opacity,\r\n        },\r\n      ]}\r\n    />\r\n  ) : null;\r\n\r\n  return [\r\n    roundedEdgeCover,\r\n    <AnimatedText\r\n      key=\"labelBackground-text\"\r\n      style={[\r\n        placeholderStyle,\r\n        labelStyle,\r\n        styles.outlinedLabel,\r\n        {\r\n          top: topPosition + 1,\r\n          width: labelLayoutWidth - placeholderStyle.paddingHorizontal,\r\n          backgroundColor,\r\n          opacity,\r\n          transform: labelTextTransform,\r\n        },\r\n      ]}\r\n      numberOfLines={1}\r\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\r\n    >\r\n      {label}\r\n    </AnimatedText>,\r\n  ];\r\n};\r\n\r\nexport default LabelBackground;\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    position: 'absolute',\r\n    top: 6,\r\n    left: 10,\r\n    width: 12,\r\n  },\r\n  // eslint-disable-next-line react-native/no-color-literals\r\n  outlinedLabel: {\r\n    position: 'absolute',\r\n    left: 8,\r\n    paddingHorizontal: 0,\r\n    color: 'transparent',\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}