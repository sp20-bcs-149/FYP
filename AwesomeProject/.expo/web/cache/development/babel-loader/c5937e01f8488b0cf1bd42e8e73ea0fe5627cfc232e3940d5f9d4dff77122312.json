{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { ListAccordionGroupContext } from \"./ListAccordionGroup\";\nimport { getAccordionColors, getLeftStyles } from \"./utils\";\nvar ListAccordion = function ListAccordion(_ref) {\n  var _theme$colors, _theme$colors2;\n  var left = _ref.left,\n    right = _ref.right,\n    title = _ref.title,\n    description = _ref.description,\n    children = _ref.children,\n    themeOverrides = _ref.theme,\n    titleStyle = _ref.titleStyle,\n    descriptionStyle = _ref.descriptionStyle,\n    _ref$titleNumberOfLin = _ref.titleNumberOfLines,\n    titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,\n    _ref$descriptionNumbe = _ref.descriptionNumberOfLines,\n    descriptionNumberOfLines = _ref$descriptionNumbe === void 0 ? 2 : _ref$descriptionNumbe,\n    customRippleColor = _ref.rippleColor,\n    style = _ref.style,\n    id = _ref.id,\n    testID = _ref.testID,\n    onPress = _ref.onPress,\n    onLongPress = _ref.onLongPress,\n    delayLongPress = _ref.delayLongPress,\n    expandedProp = _ref.expanded,\n    accessibilityLabel = _ref.accessibilityLabel,\n    _ref$pointerEvents = _ref.pointerEvents,\n    pointerEvents = _ref$pointerEvents === void 0 ? 'none' : _ref$pointerEvents;\n  var theme = useInternalTheme(themeOverrides);\n  var _React$useState = React.useState(expandedProp || false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    expanded = _React$useState2[0],\n    setExpanded = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    alignToTop = _React$useState4[0],\n    setAlignToTop = _React$useState4[1];\n  var onDescriptionTextLayout = function onDescriptionTextLayout(event) {\n    if (!theme.isV3) {\n      return;\n    }\n    var nativeEvent = event.nativeEvent;\n    setAlignToTop(nativeEvent.lines.length >= 2);\n  };\n  var handlePressAction = function handlePressAction(e) {\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n    if (expandedProp === undefined) {\n      setExpanded(function (expanded) {\n        return !expanded;\n      });\n    }\n  };\n  var expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  var groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n  var isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  var _getAccordionColors = getAccordionColors({\n      theme: theme,\n      isExpanded: isExpanded,\n      customRippleColor: customRippleColor\n    }),\n    titleColor = _getAccordionColors.titleColor,\n    descriptionColor = _getAccordionColors.descriptionColor,\n    titleTextColor = _getAccordionColors.titleTextColor,\n    rippleColor = _getAccordionColors.rippleColor;\n  var handlePress = groupContext && id !== undefined ? function () {\n    return groupContext.onAccordionPress(id);\n  } : handlePressAction;\n  return React.createElement(View, null, React.createElement(View, {\n    style: {\n      backgroundColor: theme === null || theme === void 0 ? void 0 : (_theme$colors = theme.colors) === null || _theme$colors === void 0 ? void 0 : _theme$colors.background\n    }\n  }, React.createElement(TouchableRipple, {\n    style: [theme.isV3 ? styles.containerV3 : styles.container, style],\n    onPress: handlePress,\n    onLongPress: onLongPress,\n    delayLongPress: delayLongPress,\n    rippleColor: rippleColor,\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      expanded: isExpanded\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    theme: theme,\n    borderless: true\n  }, React.createElement(View, {\n    style: theme.isV3 ? styles.rowV3 : styles.row,\n    pointerEvents: pointerEvents\n  }, left ? left({\n    color: isExpanded ? (_theme$colors2 = theme.colors) === null || _theme$colors2 === void 0 ? void 0 : _theme$colors2.primary : descriptionColor,\n    style: getLeftStyles(alignToTop, description, theme.isV3)\n  }) : null, React.createElement(View, {\n    style: [theme.isV3 ? styles.itemV3 : styles.item, styles.content]\n  }, React.createElement(Text, {\n    selectable: false,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: titleTextColor\n    }, titleStyle]\n  }, title), description ? React.createElement(Text, {\n    selectable: false,\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle],\n    onTextLayout: onDescriptionTextLayout\n  }, description) : null), React.createElement(View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, right ? right({\n    isExpanded: isExpanded\n  }) : React.createElement(MaterialCommunityIcon, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: theme.isV3 ? descriptionColor : titleColor,\n    size: 24,\n    direction: I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'\n  }))))), isExpanded ? React.Children.map(children, function (child) {\n    if (left && React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return React.cloneElement(child, {\n        style: [theme.isV3 ? styles.childV3 : styles.child, child.props.style],\n        theme: theme\n      });\n    }\n    return child;\n  }) : null);\n};\nListAccordion.displayName = 'List.Accordion';\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  containerV3: {\n    paddingVertical: 8,\n    paddingRight: 24\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  rowV3: {\n    flexDirection: 'row',\n    marginVertical: 6\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  itemV3: {\n    paddingLeft: 16\n  },\n  child: {\n    paddingLeft: 64\n  },\n  childV3: {\n    paddingLeft: 40\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default ListAccordion;","map":{"version":3,"names":["React","I18nManager","StyleSheet","View","useInternalTheme","MaterialCommunityIcon","TouchableRipple","Text","ListAccordionGroupContext","getAccordionColors","getLeftStyles","ListAccordion","_ref","_theme$colors","_theme$colors2","left","right","title","description","children","themeOverrides","theme","titleStyle","descriptionStyle","_ref$titleNumberOfLin","titleNumberOfLines","_ref$descriptionNumbe","descriptionNumberOfLines","customRippleColor","rippleColor","style","id","testID","onPress","onLongPress","delayLongPress","expandedProp","expanded","accessibilityLabel","_ref$pointerEvents","pointerEvents","_React$useState","useState","_React$useState2","_slicedToArray","setExpanded","_React$useState3","_React$useState4","alignToTop","setAlignToTop","onDescriptionTextLayout","event","isV3","nativeEvent","lines","length","handlePressAction","e","undefined","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","_getAccordionColors","titleColor","descriptionColor","titleTextColor","handlePress","onAccordionPress","createElement","backgroundColor","colors","background","styles","containerV3","container","accessibilityRole","accessibilityState","borderless","rowV3","row","color","primary","itemV3","item","content","selectable","numberOfLines","onTextLayout","multiline","name","size","direction","getConstants","isRTL","Children","map","child","isValidElement","props","cloneElement","childV3","displayName","create","padding","paddingVertical","paddingRight","flexDirection","alignItems","marginVertical","height","justifyContent","fontSize","paddingLeft","flex"],"sources":["E:\\4 -ReactNative\\Final-Year-Project\\FYP3\\AwesomeProject\\node_modules\\react-native-paper\\src\\components\\List\\ListAccordion.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ColorValue,\r\n  GestureResponderEvent,\r\n  I18nManager,\r\n  NativeSyntheticEvent,\r\n  StyleProp,\r\n  StyleSheet,\r\n  TextStyle,\r\n  TextLayoutEventData,\r\n  View,\r\n  ViewProps,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport { useInternalTheme } from '../../core/theming';\r\nimport type { ThemeProp } from '../../types';\r\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\r\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\r\nimport Text from '../Typography/Text';\r\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\r\nimport type { Style } from './utils';\r\nimport { getAccordionColors, getLeftStyles } from './utils';\r\n\r\nexport type Props = {\r\n  /**\r\n   * Title text for the list accordion.\r\n   */\r\n  title: React.ReactNode;\r\n  /**\r\n   * Description text for the list accordion.\r\n   */\r\n  description?: React.ReactNode;\r\n  /**\r\n   * Callback which returns a React element to display on the left side.\r\n   */\r\n  left?: (props: { color: string; style: Style }) => React.ReactNode;\r\n  /**\r\n   * Callback which returns a React element to display on the right side.\r\n   */\r\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\r\n  /**\r\n   * Whether the accordion is expanded\r\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\r\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\r\n   */\r\n  expanded?: boolean;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Function to execute on long press.\r\n   */\r\n  onLongPress?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * The number of milliseconds a user must touch the element before executing `onLongPress`.\r\n   */\r\n  delayLongPress?: number;\r\n  /**\r\n   * Content of the section.\r\n   */\r\n  children: React.ReactNode;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n  /**\r\n   * Style that is passed to the wrapping TouchableRipple element.\r\n   */\r\n  style?: StyleProp<ViewStyle>;\r\n  /**\r\n   * Style that is passed to Title element.\r\n   */\r\n  titleStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Style that is passed to Description element.\r\n   */\r\n  descriptionStyle?: StyleProp<TextStyle>;\r\n  /**\r\n   * Color of the ripple effect.\r\n   */\r\n  rippleColor?: ColorValue;\r\n  /**\r\n   * Truncate Title text such that the total number of lines does not\r\n   * exceed this number.\r\n   */\r\n  titleNumberOfLines?: number;\r\n  /**\r\n   * Truncate Description text such that the total number of lines does not\r\n   * exceed this number.\r\n   */\r\n  descriptionNumberOfLines?: number;\r\n  /**\r\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\r\n   */\r\n  id?: string | number;\r\n  /**\r\n   * TestID used for testing purposes\r\n   */\r\n  testID?: string;\r\n  /**\r\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\r\n   */\r\n  accessibilityLabel?: string;\r\n  /**\r\n   * `pointerEvents` passed to the `View` container\r\n   */\r\n  pointerEvents?: ViewProps['pointerEvents'];\r\n};\r\n\r\n/**\r\n * A component used to display an expandable list item.\r\n *\r\n * <div class=\"screenshots\">\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\r\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { List } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [expanded, setExpanded] = React.useState(true);\r\n *\r\n *   const handlePress = () => setExpanded(!expanded);\r\n *\r\n *   return (\r\n *     <List.Section title=\"Accordions\">\r\n *       <List.Accordion\r\n *         title=\"Uncontrolled Accordion\"\r\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\r\n *         <List.Item title=\"First item\" />\r\n *         <List.Item title=\"Second item\" />\r\n *       </List.Accordion>\r\n *\r\n *       <List.Accordion\r\n *         title=\"Controlled Accordion\"\r\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\r\n *         expanded={expanded}\r\n *         onPress={handlePress}>\r\n *         <List.Item title=\"First item\" />\r\n *         <List.Item title=\"Second item\" />\r\n *       </List.Accordion>\r\n *     </List.Section>\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\nconst ListAccordion = ({\r\n  left,\r\n  right,\r\n  title,\r\n  description,\r\n  children,\r\n  theme: themeOverrides,\r\n  titleStyle,\r\n  descriptionStyle,\r\n  titleNumberOfLines = 1,\r\n  descriptionNumberOfLines = 2,\r\n  rippleColor: customRippleColor,\r\n  style,\r\n  id,\r\n  testID,\r\n  onPress,\r\n  onLongPress,\r\n  delayLongPress,\r\n  expanded: expandedProp,\r\n  accessibilityLabel,\r\n  pointerEvents = 'none',\r\n}: Props) => {\r\n  const theme = useInternalTheme(themeOverrides);\r\n  const [expanded, setExpanded] = React.useState<boolean>(\r\n    expandedProp || false\r\n  );\r\n  const [alignToTop, setAlignToTop] = React.useState(false);\r\n\r\n  const onDescriptionTextLayout = (\r\n    event: NativeSyntheticEvent<TextLayoutEventData>\r\n  ) => {\r\n    if (!theme.isV3) {\r\n      return;\r\n    }\r\n    const { nativeEvent } = event;\r\n    setAlignToTop(nativeEvent.lines.length >= 2);\r\n  };\r\n\r\n  const handlePressAction = (e: GestureResponderEvent) => {\r\n    onPress?.(e);\r\n\r\n    if (expandedProp === undefined) {\r\n      // Only update state of the `expanded` prop was not passed\r\n      // If it was passed, the component will act as a controlled component\r\n      setExpanded((expanded) => !expanded);\r\n    }\r\n  };\r\n\r\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\r\n\r\n  const groupContext = React.useContext(ListAccordionGroupContext);\r\n  if (groupContext !== null && !id) {\r\n    throw new Error(\r\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\r\n    );\r\n  }\r\n  const isExpanded = groupContext\r\n    ? groupContext.expandedId === id\r\n    : expandedInternal;\r\n\r\n  const { titleColor, descriptionColor, titleTextColor, rippleColor } =\r\n    getAccordionColors({\r\n      theme,\r\n      isExpanded,\r\n      customRippleColor,\r\n    });\r\n\r\n  const handlePress =\r\n    groupContext && id !== undefined\r\n      ? () => groupContext.onAccordionPress(id)\r\n      : handlePressAction;\r\n  return (\r\n    <View>\r\n      <View style={{ backgroundColor: theme?.colors?.background }}>\r\n        <TouchableRipple\r\n          style={[theme.isV3 ? styles.containerV3 : styles.container, style]}\r\n          onPress={handlePress}\r\n          onLongPress={onLongPress}\r\n          delayLongPress={delayLongPress}\r\n          rippleColor={rippleColor}\r\n          accessibilityRole=\"button\"\r\n          accessibilityState={{ expanded: isExpanded }}\r\n          accessibilityLabel={accessibilityLabel}\r\n          testID={testID}\r\n          theme={theme}\r\n          borderless\r\n        >\r\n          <View\r\n            style={theme.isV3 ? styles.rowV3 : styles.row}\r\n            pointerEvents={pointerEvents}\r\n          >\r\n            {left\r\n              ? left({\r\n                  color: isExpanded ? theme.colors?.primary : descriptionColor,\r\n                  style: getLeftStyles(alignToTop, description, theme.isV3),\r\n                })\r\n              : null}\r\n            <View\r\n              style={[theme.isV3 ? styles.itemV3 : styles.item, styles.content]}\r\n            >\r\n              <Text\r\n                selectable={false}\r\n                numberOfLines={titleNumberOfLines}\r\n                style={[\r\n                  styles.title,\r\n                  {\r\n                    color: titleTextColor,\r\n                  },\r\n                  titleStyle,\r\n                ]}\r\n              >\r\n                {title}\r\n              </Text>\r\n              {description ? (\r\n                <Text\r\n                  selectable={false}\r\n                  numberOfLines={descriptionNumberOfLines}\r\n                  style={[\r\n                    styles.description,\r\n                    {\r\n                      color: descriptionColor,\r\n                    },\r\n                    descriptionStyle,\r\n                  ]}\r\n                  onTextLayout={onDescriptionTextLayout}\r\n                >\r\n                  {description}\r\n                </Text>\r\n              ) : null}\r\n            </View>\r\n            <View\r\n              style={[styles.item, description ? styles.multiline : undefined]}\r\n            >\r\n              {right ? (\r\n                right({\r\n                  isExpanded: isExpanded,\r\n                })\r\n              ) : (\r\n                <MaterialCommunityIcon\r\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\r\n                  color={theme.isV3 ? descriptionColor : titleColor}\r\n                  size={24}\r\n                  direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\r\n                />\r\n              )}\r\n            </View>\r\n          </View>\r\n        </TouchableRipple>\r\n      </View>\r\n\r\n      {isExpanded\r\n        ? React.Children.map(children, (child) => {\r\n            if (\r\n              left &&\r\n              React.isValidElement(child) &&\r\n              !child.props.left &&\r\n              !child.props.right\r\n            ) {\r\n              return React.cloneElement(child as React.ReactElement<any>, {\r\n                style: [\r\n                  theme.isV3 ? styles.childV3 : styles.child,\r\n                  child.props.style,\r\n                ],\r\n                theme,\r\n              });\r\n            }\r\n\r\n            return child;\r\n          })\r\n        : null}\r\n    </View>\r\n  );\r\n};\r\n\r\nListAccordion.displayName = 'List.Accordion';\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    padding: 8,\r\n  },\r\n  containerV3: {\r\n    paddingVertical: 8,\r\n    paddingRight: 24,\r\n  },\r\n  row: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n  },\r\n  rowV3: {\r\n    flexDirection: 'row',\r\n    marginVertical: 6,\r\n  },\r\n  multiline: {\r\n    height: 40,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n  },\r\n  description: {\r\n    fontSize: 14,\r\n  },\r\n  item: {\r\n    marginVertical: 6,\r\n    paddingLeft: 8,\r\n  },\r\n  itemV3: {\r\n    paddingLeft: 16,\r\n  },\r\n  child: {\r\n    paddingLeft: 64,\r\n  },\r\n  childV3: {\r\n    paddingLeft: 40,\r\n  },\r\n  content: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n  },\r\n});\r\n\r\nexport default ListAccordion;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}