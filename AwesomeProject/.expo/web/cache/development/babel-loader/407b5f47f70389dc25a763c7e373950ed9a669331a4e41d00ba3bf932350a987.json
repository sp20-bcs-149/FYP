{"ast":null,"code":"import color from 'color';\nimport { black, white } from \"../../styles/themes/v2/colors\";\nexport var getCardCoverStyle = function getCardCoverStyle(_ref) {\n  var theme = _ref.theme,\n    index = _ref.index,\n    total = _ref.total;\n  var isV3 = theme.isV3,\n    roundness = theme.roundness;\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness\n    };\n  }\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness\n      };\n    }\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness\n    };\n  }\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness\n    };\n  }\n  return undefined;\n};\nvar getBorderColor = function getBorderColor(_ref2) {\n  var theme = _ref2.theme;\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\nvar getBackgroundColor = function getBackgroundColor(_ref3) {\n  var theme = _ref3.theme,\n    isMode = _ref3.isMode;\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\nexport var getCardColors = function getCardColors(_ref4) {\n  var theme = _ref4.theme,\n    mode = _ref4.mode;\n  var isMode = function isMode(modeToCompare) {\n    return mode === modeToCompare;\n  };\n  return {\n    backgroundColor: getBackgroundColor({\n      theme: theme,\n      isMode: isMode\n    }),\n    borderColor: getBorderColor({\n      theme: theme\n    })\n  };\n};","map":{"version":3,"names":["color","black","white","getCardCoverStyle","_ref","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","_ref2","colors","outline","dark","alpha","rgb","string","getBackgroundColor","_ref3","isMode","surfaceVariant","surface","getCardColors","_ref4","mode","modeToCompare","backgroundColor","borderColor"],"sources":["E:\\4 -ReactNative\\Final-Year-Project\\FYP3\\AwesomeProject\\node_modules\\react-native-paper\\src\\components\\Card\\utils.tsx"],"sourcesContent":["import color from 'color';\r\n\r\nimport { black, white } from '../../styles/themes/v2/colors';\r\nimport type { InternalTheme } from '../../types';\r\n\r\ntype CardMode = 'elevated' | 'outlined' | 'contained';\r\n\r\nexport const getCardCoverStyle = ({\r\n  theme,\r\n  index,\r\n  total,\r\n}: {\r\n  theme: InternalTheme;\r\n  index?: number;\r\n  total?: number;\r\n}) => {\r\n  const { isV3, roundness } = theme;\r\n\r\n  if (isV3) {\r\n    return {\r\n      borderRadius: 3 * roundness,\r\n    };\r\n  }\r\n\r\n  if (index === 0) {\r\n    if (total === 1) {\r\n      return {\r\n        borderRadius: roundness,\r\n      };\r\n    }\r\n\r\n    return {\r\n      borderTopLeftRadius: roundness,\r\n      borderTopRightRadius: roundness,\r\n    };\r\n  }\r\n\r\n  if (typeof total === 'number' && index === total - 1) {\r\n    return {\r\n      borderBottomLeftRadius: roundness,\r\n    };\r\n  }\r\n\r\n  return undefined;\r\n};\r\n\r\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\r\n  if (theme.isV3) {\r\n    return theme.colors.outline;\r\n  }\r\n\r\n  if (theme.dark) {\r\n    return color(white).alpha(0.12).rgb().string();\r\n  }\r\n  return color(black).alpha(0.12).rgb().string();\r\n};\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  isMode,\r\n}: {\r\n  theme: InternalTheme;\r\n  isMode: (mode: CardMode) => boolean;\r\n}) => {\r\n  if (theme.isV3) {\r\n    if (isMode('contained')) {\r\n      return theme.colors.surfaceVariant;\r\n    }\r\n    if (isMode('outlined')) {\r\n      return theme.colors.surface;\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const getCardColors = ({\r\n  theme,\r\n  mode,\r\n}: {\r\n  theme: InternalTheme;\r\n  mode: CardMode;\r\n}) => {\r\n  const isMode = (modeToCompare: CardMode) => {\r\n    return mode === modeToCompare;\r\n  };\r\n\r\n  return {\r\n    backgroundColor: getBackgroundColor({\r\n      theme,\r\n      isMode,\r\n    }),\r\n    borderColor: getBorderColor({ theme }),\r\n  };\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,KAAK,EAAEC,KAAK;AAKrB,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAGC,IAAA,EAQ3B;EAAA,IAPJC,KAAK,GAOND,IAAA,CAPCC,KAAK;IACLC,KAAK,GAMNF,IAAA,CANCE,KAAK;IACLC,KAAA,GAKDH,IAAA,CALCG,KAAA;EAMA,IAAQC,IAAI,GAAgBH,KAAK,CAAzBG,IAAI;IAAEC,SAAA,GAAcJ,KAAK,CAAnBI,SAAA;EAEd,IAAID,IAAI,EAAE;IACR,OAAO;MACLE,YAAY,EAAE,CAAC,GAAGD;IACpB,CAAC;EACH;EAEA,IAAIH,KAAK,KAAK,CAAC,EAAE;IACf,IAAIC,KAAK,KAAK,CAAC,EAAE;MACf,OAAO;QACLG,YAAY,EAAED;MAChB,CAAC;IACH;IAEA,OAAO;MACLE,mBAAmB,EAAEF,SAAS;MAC9BG,oBAAoB,EAAEH;IACxB,CAAC;EACH;EAEA,IAAI,OAAOF,KAAK,KAAK,QAAQ,IAAID,KAAK,KAAKC,KAAK,GAAG,CAAC,EAAE;IACpD,OAAO;MACLM,sBAAsB,EAAEJ;IAC1B,CAAC;EACH;EAEA,OAAOK,SAAS;AAClB,CAAC;AAED,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAGC,KAAA,EAAyC;EAAA,IAAtCX,KAAA,GAAiCW,KAAA,CAAjCX,KAAA;EACxB,IAAIA,KAAK,CAACG,IAAI,EAAE;IACd,OAAOH,KAAK,CAACY,MAAM,CAACC,OAAO;EAC7B;EAEA,IAAIb,KAAK,CAACc,IAAI,EAAE;IACd,OAAOnB,KAAK,CAACE,KAAK,CAAC,CAACkB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;EAChD;EACA,OAAOtB,KAAK,CAACC,KAAK,CAAC,CAACmB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE;AAChD,CAAC;AAED,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAGC,KAAA,EAMrB;EAAA,IALJnB,KAAK,GAKNmB,KAAA,CALCnB,KAAK;IACLoB,MAAA,GAIDD,KAAA,CAJCC,MAAA;EAKA,IAAIpB,KAAK,CAACG,IAAI,EAAE;IACd,IAAIiB,MAAM,CAAC,WAAW,CAAC,EAAE;MACvB,OAAOpB,KAAK,CAACY,MAAM,CAACS,cAAc;IACpC;IACA,IAAID,MAAM,CAAC,UAAU,CAAC,EAAE;MACtB,OAAOpB,KAAK,CAACY,MAAM,CAACU,OAAO;IAC7B;EACF;EACA,OAAOb,SAAS;AAClB,CAAC;AAED,OAAO,IAAMc,aAAa,GAAG,SAAhBA,aAAaA,CAAGC,KAAA,EAMvB;EAAA,IALJxB,KAAK,GAKNwB,KAAA,CALCxB,KAAK;IACLyB,IAAA,GAIDD,KAAA,CAJCC,IAAA;EAKA,IAAML,MAAM,GAAI,SAAVA,MAAMA,CAAIM,aAAuB,EAAK;IAC1C,OAAOD,IAAI,KAAKC,aAAa;EAC/B,CAAC;EAED,OAAO;IACLC,eAAe,EAAET,kBAAkB,CAAC;MAClClB,KAAK,EAALA,KAAK;MACLoB,MAAA,EAAAA;IACF,CAAC,CAAC;IACFQ,WAAW,EAAElB,cAAc,CAAC;MAAEV,KAAA,EAAAA;IAAM,CAAC;EACvC,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}