{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"icon\", \"onPress\", \"forceTextInputFocus\", \"color\", \"theme\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../../core/theming\";\nimport IconButton from \"../../IconButton/IconButton\";\nimport { ICON_SIZE } from \"../constants\";\nimport { getConstants } from \"../helpers\";\nimport { getIconColor } from \"./utils\";\nvar StyleContext = React.createContext({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: function forceFocus() {},\n  testID: ''\n});\nvar IconAdornment = function IconAdornment(_ref) {\n  var icon = _ref.icon,\n    topPosition = _ref.topPosition,\n    side = _ref.side,\n    isTextInputFocused = _ref.isTextInputFocused,\n    forceFocus = _ref.forceFocus,\n    testID = _ref.testID,\n    themeOverrides = _ref.theme,\n    disabled = _ref.disabled;\n  var _useInternalTheme = useInternalTheme(themeOverrides),\n    isV3 = _useInternalTheme.isV3;\n  var _getConstants = getConstants(isV3),\n    ICON_OFFSET = _getConstants.ICON_OFFSET;\n  var style = _defineProperty({\n    top: topPosition\n  }, side, ICON_OFFSET);\n  var contextState = {\n    style: style,\n    isTextInputFocused: isTextInputFocused,\n    forceFocus: forceFocus,\n    testID: testID,\n    disabled: disabled\n  };\n  return React.createElement(StyleContext.Provider, {\n    value: contextState\n  }, icon);\n};\nvar TextInputIcon = function TextInputIcon(_ref2) {\n  var icon = _ref2.icon,\n    onPress = _ref2.onPress,\n    forceTextInputFocus = _ref2.forceTextInputFocus,\n    color = _ref2.color,\n    themeOverrides = _ref2.theme,\n    rest = _objectWithoutProperties(_ref2, _excluded);\n  var _React$useContext = React.useContext(StyleContext),\n    style = _React$useContext.style,\n    isTextInputFocused = _React$useContext.isTextInputFocused,\n    forceFocus = _React$useContext.forceFocus,\n    testID = _React$useContext.testID,\n    disabled = _React$useContext.disabled;\n  var onPressWithFocusControl = React.useCallback(function (e) {\n    if (forceTextInputFocus && !isTextInputFocused) {\n      forceFocus();\n    }\n    onPress === null || onPress === void 0 ? void 0 : onPress(e);\n  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);\n  var theme = useInternalTheme(themeOverrides);\n  var iconColor = getIconColor({\n    theme: theme,\n    disabled: disabled\n  });\n  return React.createElement(View, {\n    style: [styles.container, style]\n  }, React.createElement(IconButton, _extends({\n    icon: icon,\n    style: styles.iconButton,\n    size: ICON_SIZE,\n    onPress: onPressWithFocusControl,\n    iconColor: typeof color === 'function' ? color(isTextInputFocused) : iconColor,\n    testID: testID,\n    theme: themeOverrides\n  }, rest)));\n};\nTextInputIcon.displayName = 'TextInput.Icon';\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true\n};\nvar styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  iconButton: {\n    margin: 0\n  }\n});\nexport default TextInputIcon;\nexport { IconAdornment };","map":{"version":3,"names":["React","StyleSheet","View","useInternalTheme","IconButton","ICON_SIZE","getConstants","getIconColor","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","_ref","icon","topPosition","side","themeOverrides","theme","disabled","_useInternalTheme","isV3","_getConstants","ICON_OFFSET","_defineProperty","top","contextState","createElement","Provider","value","TextInputIcon","_ref2","onPress","forceTextInputFocus","color","rest","_objectWithoutProperties","_excluded","_React$useContext","useContext","onPressWithFocusControl","useCallback","e","iconColor","styles","container","_extends","iconButton","size","displayName","defaultProps","create","position","width","height","justifyContent","alignItems","margin"],"sources":["E:\\4 -ReactNative\\Final-Year-Project\\FYP3\\AwesomeProject\\node_modules\\react-native-paper\\src\\components\\TextInput\\Adornment\\TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  GestureResponderEvent,\r\n  StyleProp,\r\n  StyleSheet,\r\n  View,\r\n  ViewStyle,\r\n} from 'react-native';\r\n\r\nimport { useInternalTheme } from '../../../core/theming';\r\nimport type { $Omit, ThemeProp } from '../../../types';\r\nimport type { IconSource } from '../../Icon';\r\nimport IconButton from '../../IconButton/IconButton';\r\nimport { ICON_SIZE } from '../constants';\r\nimport { getConstants } from '../helpers';\r\nimport { getIconColor } from './utils';\r\n\r\nexport type Props = $Omit<\r\n  React.ComponentProps<typeof IconButton>,\r\n  'icon' | 'theme' | 'color'\r\n> & {\r\n  /**\r\n   * @renamed Renamed from 'name' to 'icon` in v5.x\r\n   * Icon to show.\r\n   */\r\n  icon: IconSource;\r\n  /**\r\n   * Function to execute on press.\r\n   */\r\n  onPress?: (e: GestureResponderEvent) => void;\r\n  /**\r\n   * Whether the TextInput will focus after onPress.\r\n   */\r\n  forceTextInputFocus?: boolean;\r\n  /**\r\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\r\n   */\r\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\r\n  style?: StyleProp<ViewStyle>;\r\n  /**\r\n   * @optional\r\n   */\r\n  theme?: ThemeProp;\r\n};\r\n\r\ntype StyleContextType = {\r\n  style: StyleProp<ViewStyle>;\r\n  isTextInputFocused: boolean;\r\n  forceFocus: () => void;\r\n  testID: string;\r\n  disabled?: boolean;\r\n};\r\n\r\nconst StyleContext = React.createContext<StyleContextType>({\r\n  style: {},\r\n  isTextInputFocused: false,\r\n  forceFocus: () => {},\r\n  testID: '',\r\n});\r\n\r\nconst IconAdornment: React.FunctionComponent<\r\n  {\r\n    testID: string;\r\n    icon: React.ReactNode;\r\n    topPosition: number;\r\n    side: 'left' | 'right';\r\n    theme?: ThemeProp;\r\n    disabled?: boolean;\r\n  } & Omit<StyleContextType, 'style'>\r\n> = ({\r\n  icon,\r\n  topPosition,\r\n  side,\r\n  isTextInputFocused,\r\n  forceFocus,\r\n  testID,\r\n  theme: themeOverrides,\r\n  disabled,\r\n}) => {\r\n  const { isV3 } = useInternalTheme(themeOverrides);\r\n  const { ICON_OFFSET } = getConstants(isV3);\r\n\r\n  const style = {\r\n    top: topPosition,\r\n    [side]: ICON_OFFSET,\r\n  };\r\n  const contextState = {\r\n    style,\r\n    isTextInputFocused,\r\n    forceFocus,\r\n    testID,\r\n    disabled,\r\n  };\r\n\r\n  return (\r\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * A component to render a leading / trailing icon in the TextInput\r\n *\r\n * <div class=\"screenshots\">\r\n *   <figure>\r\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\r\n *   </figure>\r\n * </div>\r\n *\r\n * ## Usage\r\n * ```js\r\n * import * as React from 'react';\r\n * import { TextInput } from 'react-native-paper';\r\n *\r\n * const MyComponent = () => {\r\n *   const [text, setText] = React.useState('');\r\n *\r\n *   return (\r\n *     <TextInput\r\n *       label=\"Password\"\r\n *       secureTextEntry\r\n *       right={<TextInput.Icon icon=\"eye\" />}\r\n *     />\r\n *   );\r\n * };\r\n *\r\n * export default MyComponent;\r\n * ```\r\n */\r\n\r\nconst TextInputIcon = ({\r\n  icon,\r\n  onPress,\r\n  forceTextInputFocus,\r\n  color,\r\n  theme: themeOverrides,\r\n  ...rest\r\n}: Props) => {\r\n  const { style, isTextInputFocused, forceFocus, testID, disabled } =\r\n    React.useContext(StyleContext);\r\n\r\n  const onPressWithFocusControl = React.useCallback(\r\n    (e: GestureResponderEvent) => {\r\n      if (forceTextInputFocus && !isTextInputFocused) {\r\n        forceFocus();\r\n      }\r\n\r\n      onPress?.(e);\r\n    },\r\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\r\n  );\r\n\r\n  const theme = useInternalTheme(themeOverrides);\r\n\r\n  const iconColor = getIconColor({ theme, disabled });\r\n\r\n  return (\r\n    <View style={[styles.container, style]}>\r\n      <IconButton\r\n        icon={icon}\r\n        style={styles.iconButton}\r\n        size={ICON_SIZE}\r\n        onPress={onPressWithFocusControl}\r\n        iconColor={\r\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\r\n        }\r\n        testID={testID}\r\n        theme={themeOverrides}\r\n        {...rest}\r\n      />\r\n    </View>\r\n  );\r\n};\r\nTextInputIcon.displayName = 'TextInput.Icon';\r\n\r\nTextInputIcon.defaultProps = {\r\n  forceTextInputFocus: true,\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    position: 'absolute',\r\n    width: ICON_SIZE,\r\n    height: ICON_SIZE,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  iconButton: {\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nexport default TextInputIcon;\r\n\r\n// @component-docs ignore-next-line\r\nexport { IconAdornment };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}