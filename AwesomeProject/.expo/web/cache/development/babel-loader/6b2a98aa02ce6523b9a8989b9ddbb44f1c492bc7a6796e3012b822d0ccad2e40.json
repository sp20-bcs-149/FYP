{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar EventEmitter = function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n    this._registry = {};\n  }\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      var registrations = allocate(this._registry, eventType);\n      var registration = {\n        context: context,\n        listener: listener,\n        remove: function remove() {\n          registrations.delete(registration);\n        }\n      };\n      registrations.add(registration);\n      return registration;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var registrations = this._registry[eventType];\n      if (registrations != null) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var registration of _toConsumableArray(registrations)) {\n          registration.listener.apply(registration.context, args);\n        }\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      if (eventType == null) {\n        this._registry = {};\n      } else {\n        delete this._registry[eventType];\n      }\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var registrations = this._registry[eventType];\n      return registrations == null ? 0 : registrations.size;\n    }\n  }]);\n  return EventEmitter;\n}();\nexport { EventEmitter as default };\nfunction allocate(registry, eventType) {\n  var registrations = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}","map":{"version":3,"names":["EventEmitter","_classCallCheck","_registry","_createClass","key","value","addListener","eventType","listener","context","registrations","allocate","registration","remove","delete","add","emit","_len","arguments","length","args","Array","_key","_toConsumableArray","apply","removeAllListeners","listenerCount","size","default","registry","Set"],"sources":["E:/4 -ReactNative/Final-Year-Project/FYP3/AwesomeProject/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\nexport interface EventSubscription {\r\n  remove(): void;\r\n}\r\n\r\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\r\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\r\n    eventType: TEvent,\r\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\r\n    context?: mixed,\r\n  ): EventSubscription;\r\n\r\n  emit<TEvent: $Keys<TEventToArgsMap>>(\r\n    eventType: TEvent,\r\n    ...args: $ElementType<TEventToArgsMap, TEvent>\r\n  ): void;\r\n\r\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\r\n\r\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\r\n}\r\n\r\ninterface Registration<TArgs> {\r\n  +context: mixed;\r\n  +listener: (...args: TArgs) => mixed;\r\n  +remove: () => void;\r\n}\r\n\r\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\r\n  TEventToArgsMap,\r\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\r\n>;\r\n\r\n/**\r\n * EventEmitter manages listeners and publishes events to them.\r\n *\r\n * EventEmitter accepts a single type parameter that defines the valid events\r\n * and associated listener argument(s).\r\n *\r\n * @example\r\n *\r\n *   const emitter = new EventEmitter<{\r\n *     success: [number, string],\r\n *     error: [Error],\r\n *   }>();\r\n *\r\n *   emitter.on('success', (statusCode, responseText) => {...});\r\n *   emitter.emit('success', 200, '...');\r\n *\r\n *   emitter.on('error', error => {...});\r\n *   emitter.emit('error', new Error('Resource not found'));\r\n *\r\n */\r\nexport default class EventEmitter<TEventToArgsMap: {...}>\r\n  implements IEventEmitter<TEventToArgsMap>\r\n{\r\n  _registry: Registry<TEventToArgsMap> = {};\r\n\r\n  /**\r\n   * Registers a listener that is called when the supplied event is emitted.\r\n   * Returns a subscription that has a `remove` method to undo registration.\r\n   */\r\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\r\n    eventType: TEvent,\r\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\r\n    context: mixed,\r\n  ): EventSubscription {\r\n    const registrations = allocate(this._registry, eventType);\r\n    const registration: Registration<$ElementType<TEventToArgsMap, TEvent>> = {\r\n      context,\r\n      listener,\r\n      remove(): void {\r\n        registrations.delete(registration);\r\n      },\r\n    };\r\n    registrations.add(registration);\r\n    return registration;\r\n  }\r\n\r\n  /**\r\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\r\n   * passed through to each of the registered listeners.\r\n   *\r\n   * If a listener modifies the listeners registered for the same event, those\r\n   * changes will not be reflected in the current invocation of `emit`.\r\n   */\r\n  emit<TEvent: $Keys<TEventToArgsMap>>(\r\n    eventType: TEvent,\r\n    ...args: $ElementType<TEventToArgsMap, TEvent>\r\n  ): void {\r\n    const registrations: ?Set<\r\n      Registration<$ElementType<TEventToArgsMap, TEvent>>,\r\n    > = this._registry[eventType];\r\n    if (registrations != null) {\r\n      for (const registration of [...registrations]) {\r\n        registration.listener.apply(registration.context, args);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes all registered listeners.\r\n   */\r\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\r\n    eventType?: ?TEvent,\r\n  ): void {\r\n    if (eventType == null) {\r\n      this._registry = {};\r\n    } else {\r\n      delete this._registry[eventType];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the number of registered listeners for the supplied event.\r\n   */\r\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\r\n    const registrations: ?Set<Registration<mixed>> = this._registry[eventType];\r\n    return registrations == null ? 0 : registrations.size;\r\n  }\r\n}\r\n\r\nfunction allocate<\r\n  TEventToArgsMap: {...},\r\n  TEvent: $Keys<TEventToArgsMap>,\r\n  TEventArgs: $ElementType<TEventToArgsMap, TEvent>,\r\n>(\r\n  registry: Registry<TEventToArgsMap>,\r\n  eventType: TEvent,\r\n): Set<Registration<TEventArgs>> {\r\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\r\n  if (registrations == null) {\r\n    registrations = new Set();\r\n    registry[eventType] = registrations;\r\n  }\r\n  return registrations;\r\n}\r\n"],"mappings":";;;IA8DqBA,YAAY;EAAA,SAAAA,aAAA;IAAAC,eAAA,OAAAD,YAAA;IAAA,KAG/BE,SAAS,GAA8B,CAAC,CAAC;EAAA;EAAAC,YAAA,CAAAH,YAAA;IAAAI,GAAA;IAAAC,KAAA,EAMzC,SAAAC,YACEC,SAAiB,EACjBC,QAAmE,EACnEC,OAAc,EACK;MACnB,IAAMC,aAAa,GAAGC,QAAQ,CAAC,IAAI,CAACT,SAAS,EAAEK,SAAS,CAAC;MACzD,IAAMK,YAAiE,GAAG;QACxEH,OAAO,EAAPA,OAAO;QACPD,QAAQ,EAARA,QAAQ;QACRK,MAAM,WAAAA,OAAA,EAAS;UACbH,aAAa,CAACI,MAAM,CAACF,YAAY,CAAC;QACpC;MACF,CAAC;MACDF,aAAa,CAACK,GAAG,CAACH,YAAY,CAAC;MAC/B,OAAOA,YAAY;IACrB;EAAC;IAAAR,GAAA;IAAAC,KAAA,EASD,SAAAW,KACET,SAAiB,EAEX;MACN,IAAMG,aAEL,GAAG,IAAI,CAACR,SAAS,CAACK,SAAS,CAAC;MAC7B,IAAIG,aAAa,IAAI,IAAI,EAAE;QAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EALxBC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;UAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;QAAA;QAML,KAAK,IAAMV,YAAY,IAAAW,kBAAA,CAAQb,aAAa,GAAG;UAC7CE,YAAY,CAACJ,QAAQ,CAACgB,KAAK,CAACZ,YAAY,CAACH,OAAO,EAAEW,IAAI,CAAC;QACzD;MACF;IACF;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAKD,SAAAoB,mBACElB,SAAmB,EACb;MACN,IAAIA,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACL,SAAS,GAAG,CAAC,CAAC;MACrB,CAAC,MAAM;QACL,OAAO,IAAI,CAACA,SAAS,CAACK,SAAS,CAAC;MAClC;IACF;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAKD,SAAAqB,cAA8CnB,SAAiB,EAAU;MACvE,IAAMG,aAAwC,GAAG,IAAI,CAACR,SAAS,CAACK,SAAS,CAAC;MAC1E,OAAOG,aAAa,IAAI,IAAI,GAAG,CAAC,GAAGA,aAAa,CAACiB,IAAI;IACvD;EAAC;EAAA,OAAA3B,YAAA;AAAA;AAAA,SAlEkBA,YAAY,IAAA4B,OAAA;AAqEjC,SAASjB,QAAQA,CAKfkB,QAAmC,EACnCtB,SAAiB,EACc;EAC/B,IAAIG,aAA6C,GAAGmB,QAAQ,CAACtB,SAAS,CAAC;EACvE,IAAIG,aAAa,IAAI,IAAI,EAAE;IACzBA,aAAa,GAAG,IAAIoB,GAAG,CAAC,CAAC;IACzBD,QAAQ,CAACtB,SAAS,CAAC,GAAGG,aAAa;EACrC;EACA,OAAOA,aAAa;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}