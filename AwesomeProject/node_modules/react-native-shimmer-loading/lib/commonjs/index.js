"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactNativeRedash = require("react-native-redash");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const getOutputRange = (width, isReversed) => {
  'worklet';

  return isReversed ? [width, -width] : [-width, width];
};

const ShimmerPlaceholder = /*#__PURE__*/_react.default.memo(props => {
  const {
    reverseLoop = true
  } = props;
  const animatedValue = (0, _reactNativeReanimated.useSharedValue)(-1);
  const paused = (0, _reactNativeReanimated.useSharedValue)(props.visible);
  (0, _react.useEffect)(() => {
    paused.value = props.visible;
  }, [props.visible, paused]);
  (0, _react.useEffect)(() => {
    animatedValue.value = -1;
    animatedValue.value = (0, _reactNativeRedash.withPause)((0, _reactNativeReanimated.withRepeat)((0, _reactNativeReanimated.withTiming)(1, {
      duration: 1000,
      easing: _reactNativeReanimated.Easing.ease
    }), -1, reverseLoop), paused);
  }, [animatedValue, paused, reverseLoop]);
  return /*#__PURE__*/_react.default.createElement(BasedShimmerPlaceholder, _extends({}, props, {
    animatedValue: animatedValue
  }));
});

const BasedShimmerPlaceholder = props => {
  var _shimmerStyle$width;

  const {
    shimmerColors = ["#ebebeb", "#c5c5c5", "#ebebeb"],
    isReversed = false,
    visible,
    location = [0.3, 0.5, 0.7],
    style,
    contentStyle,
    shimmerStyle,
    LinearGradient = _reactNative.View,
    children,
    animatedValue,
    shimmerWidthPercent = 1,
    containerProps,
    shimmerContainerProps,
    childrenContainerProps
  } = props;
  const width = parseFloat(`${(_shimmerStyle$width = shimmerStyle === null || shimmerStyle === void 0 ? void 0 : shimmerStyle.width) !== null && _shimmerStyle$width !== void 0 ? _shimmerStyle$width : 0}`);
  const animatedStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    var _animatedValue$value;

    const linearTranslate = (0, _reactNativeReanimated.interpolate)((_animatedValue$value = animatedValue.value) !== null && _animatedValue$value !== void 0 ? _animatedValue$value : -1, [-1, 1], getOutputRange(width, isReversed));
    return {
      transform: [{
        translateX: linearTranslate
      }]
    };
  });
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    style: [styles.container, !visible && shimmerStyle, style]
  }, containerProps), /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    style: [!visible && {
      width: 0,
      height: 0,
      opacity: 0
    }, visible && contentStyle]
  }, childrenContainerProps), children), !visible && /*#__PURE__*/_react.default.createElement(_reactNative.View, _extends({
    style: [styles.shimmer, {
      backgroundColor: shimmerColors[0]
    }]
  }, shimmerContainerProps), /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [styles.shimmer, animatedStyle]
  }, /*#__PURE__*/_react.default.createElement(LinearGradient, {
    colors: shimmerColors,
    style: {
      flex: 1,
      width: width * shimmerWidthPercent
    },
    start: {
      x: -1,
      y: 0.5
    },
    end: {
      x: 2,
      y: 0.5
    },
    locations: location
  }))));
};

const styles = _reactNative.StyleSheet.create({
  container: {
    overflow: "hidden"
  },
  shimmer: {
    flex: 1
  }
});

var _default = ShimmerPlaceholder;
exports.default = _default;
//# sourceMappingURL=index.js.map